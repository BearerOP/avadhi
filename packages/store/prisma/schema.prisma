// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

/// @seed = "npx tsx prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? // Required by NextAuth
  image         String?
  password      String?   
  provider      String?   // 'google', 'github', 'credentials'
  providerId    String?   // OAuth provider user ID
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  websites      Website[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Website {
  id        String   @id @default(uuid())
  name      String
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticks WebsiteTick[]
  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String?
}

model Region {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  WebsiteTick WebsiteTick[] 
}

// model WebsiteRegion {
//   websiteId String
//   regionId  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@id([websiteId, regionId])
// }

model WebsiteTick {
  id        String   @id @default(uuid())
  response_time_ms  Int
  status WebsiteTickStatus @default(UNKNOWN)
  Region Region @relation(fields: [region_id], references: [id])
  // TODO: Add more fields here

  status_code Int
  status_text String
  error_message String? @default("")
  website_id String
  region_id  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Website Website @relation(fields: [website_id], references: [id], onDelete: Cascade)

  @@index([website_id, region_id])
  @@index([website_id, createdAt])
}

enum WebsiteTickStatus {
  UP
  DOWN
  UNKNOWN
}